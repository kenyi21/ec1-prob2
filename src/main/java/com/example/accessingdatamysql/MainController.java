package com.example.accessingdatamysql;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/mascota") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private MascotaRepository mascotaRepository;

  @Autowired
  private JdbcTemplate jdbcTemplate;


  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewMascota (@RequestParam String name
      , @RequestParam String raza) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Mascota n = new Mascota();
    n.setName(name);
    n.setRaza(raza);
    mascotaRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Mascota> getAllMascota() {
    // This returns a JSON or XML with the users
    return MascotaRepository.findAll();
  }

  @PutMapping(path="/edit")
  public @ResponseBody String editMascota(@RequestParam String name, @RequestParam String raza, @RequestParam String propietario ,@RequestParam Integer id) {
    Mascota n = new Mascota();
    n.setId(id);
    n.setName(name);
    n.setRaza(raza);
    n.set.Propietario(propietario);
    userRepository.save(n);
    return "Edited";
  }
    
  @GetMapping(path="/ver/{id}")
  public @ResponseBody Mascota getMascota(@PathVariable Integer id) {
    return mascotaRepository.findById(id).get();
  }

  @DeleteMapping(path="/del")
  public @ResponseBody String editMascota(@RequestParam Integer id) {
    Mascota n = new Mascota();
    n.setId(id);
    mascotaRepository.delete(n);
    return "Deleted";
  }

  @GetMapping(path="/get/report")
  public @ResponseBody List<Map<String, Object>> getReport(){
    String sql = "SELECT CONCAT(name, '(nombre) ==> (correo)', email) as MIS_USUARIOS FROM user;";
    List<Map<String, Object>> users = jdbcTemplate.queryForList(sql);
    return users;

  }


}